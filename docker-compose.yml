version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: onfly_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: onfly_db
      POSTGRES_USER: onfly_user
      POSTGRES_PASSWORD: onfly_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - onfly_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U onfly_user -d onfly_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Laravel API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: onfly_api
    restart: unless-stopped
    working_dir: /var/www/html
    ports:
      - "8000:8000"
    volumes:
      - ./api:/var/www/html
    environment:
      - APP_NAME=OnFly API
      - APP_ENV=local
      - APP_KEY=base64:LxNMd76frNEZDoBKcRAxScr9Cs4DMNCxx9vhiAVd3zg=
      - APP_DEBUG=true
      - APP_URL=http://localhost:8000
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=onfly_db
      - DB_USERNAME=onfly_user
      - DB_PASSWORD=onfly_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - onfly_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue.js Frontend
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: onfly_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./front:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - onfly_network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # Nginx (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: onfly_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./api/public:/var/www/html/public
    depends_on:
      - api
      - frontend
    networks:
      - onfly_network

volumes:
  postgres_data:
    driver: local

networks:
  onfly_network:
    driver: bridge